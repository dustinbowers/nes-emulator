use macroquad::color::Color;
use once_cell::sync::Lazy;

pub static SYSTEM_PALETTE: [(u8,u8,u8); 64] = [
    (0x80, 0x80, 0x80), (0x00, 0x3D, 0xA6), (0x00, 0x12, 0xB0), (0x44, 0x00, 0x96), (0xA1, 0x00, 0x5E),
    (0xC7, 0x00, 0x28), (0xBA, 0x06, 0x00), (0x8C, 0x17, 0x00), (0x5C, 0x2F, 0x00), (0x10, 0x45, 0x00),
    (0x05, 0x4A, 0x00), (0x00, 0x47, 0x2E), (0x00, 0x41, 0x66), (0x00, 0x00, 0x00), (0x05, 0x05, 0x05),
    (0x05, 0x05, 0x05), (0xC7, 0xC7, 0xC7), (0x00, 0x77, 0xFF), (0x21, 0x55, 0xFF), (0x82, 0x37, 0xFA),
    (0xEB, 0x2F, 0xB5), (0xFF, 0x29, 0x50), (0xFF, 0x22, 0x00), (0xD6, 0x32, 0x00), (0xC4, 0x62, 0x00),
    (0x35, 0x80, 0x00), (0x05, 0x8F, 0x00), (0x00, 0x8A, 0x55), (0x00, 0x99, 0xCC), (0x21, 0x21, 0x21),
    (0x09, 0x09, 0x09), (0x09, 0x09, 0x09), (0xFF, 0xFF, 0xFF), (0x0F, 0xD7, 0xFF), (0x69, 0xA2, 0xFF),
    (0xD4, 0x80, 0xFF), (0xFF, 0x45, 0xF3), (0xFF, 0x61, 0x8B), (0xFF, 0x88, 0x33), (0xFF, 0x9C, 0x12),
    (0xFA, 0xBC, 0x20), (0x9F, 0xE3, 0x0E), (0x2B, 0xF0, 0x35), (0x0C, 0xF0, 0xA4), (0x05, 0xFB, 0xFF),
    (0x5E, 0x5E, 0x5E), (0x0D, 0x0D, 0x0D), (0x0D, 0x0D, 0x0D), (0xFF, 0xFF, 0xFF), (0xA6, 0xFC, 0xFF),
    (0xB3, 0xEC, 0xFF), (0xDA, 0xAB, 0xEB), (0xFF, 0xA8, 0xF9), (0xFF, 0xAB, 0xB3), (0xFF, 0xD2, 0xB0),
    (0xFF, 0xEF, 0xA6), (0xFF, 0xF7, 0x9C), (0xD7, 0xE8, 0x95), (0xA6, 0xED, 0xAF), (0xA2, 0xF2, 0xDA),
    (0x99, 0xFF, 0xFC), (0xDD, 0xDD, 0xDD), (0x11, 0x11, 0x11), (0x11, 0x11, 0x11)
];

pub struct ColorMap {
    default_map: Vec<Color>,
    custom_map: Vec<Color>,
}

impl ColorMap {
    pub fn new() -> Self {
        let mut color_map: Vec<Color> = vec![];
        for c in SYSTEM_PALETTE.iter() {
            let r = c.0;
            let g = c.1;
            let b = c.2;
            let palette_color = Color::from_rgba(r, g, b, 255);
            color_map.push(palette_color);
        }
        Self {
            custom_map: vec![],
            default_map: color_map,
        }
    }
}

impl ColorMap {
    pub fn set_int_color_map(&mut self, int_color_map: &Vec<u32>) {
        self.custom_map = int_color_map
            .iter()
            .map(|c| {
                let r = ((c >> 16) & 0xFFu32) as f32 / 255.0;
                let g = ((c >> 8) & 0xFFu32) as f32 / 255.0;
                let b = ((c) & 0xFFu32) as f32 / 255.0;
                Color::new(r, g, b, 1.0)
            })
            .collect();
    }

    #[inline]
    pub fn get_color(&self, ind: usize) -> &Color {
        // if ind < self.custom_map.len() {
        //     &self.custom_map[ind]
        // } else {
            &self.default_map[ind]
        // }
    }
}

// Global static instance of ColorMap
pub static COLOR_MAP: Lazy<ColorMap> = Lazy::new(ColorMap::new);